{"title":"Biography","layout":1,"infoBox":{"image":"zack-wilson.jpg","data":{"Name":"Zack Wilson","Aliases":"DragonZBW, Zack of All Trades","Pronouns":"He/Him","Age":"24","Alma Mater":"RIT","Degree":"B.S. in Game Design & Development, summa cum laude","Favorite Game":"Xenoblade","Favorite Band":"OK Goodnight","Favorite Anime":"Gurren Lagann"}},"text":[{"heading":"About Me","paragraphs":["I'm Zack Wilson, an American game developer and musician, among other things. I grew up with an early interest in computers, storytelling, and game design, often creating my own rules for board games when playing with my parents. Over time, my creative interests turned into things I wanted to seriously pursue, so I began learning about programming, game design, music, and so on.","I love action movies, stylized animation, philosophy, cool characters with big swords, and colorful games that are fun to control! My dream is to become creative director of a larger-scale character action game or RPG one day, but for now I'm doing whatever I can to keep honing my skills."]},{"heading":"Education & Extracurriculars","paragraphs":["I attended the Advanced Academics Program at my elementary school, later taking honors and AP courses in middle and high school. I was accepted to the Game Design and Development program at the Rochester Institute of Technology and graduated [i : summa cum laude] in the Fall semester of 2023.","Prior to college, I engaged in many extracurricular activities such as orchestra, FIRST LEGO League, and a game development club, of which I was president. Throughout college I spent most of my time outside of class working part-time jobs, developing personal projects, or working on music for the two bands I joined."]},{"heading":"Career","paragraphs":["Most recently, I worked on [Raw Metal : #games.raw-metal], my first commercial game. I worked in a small team as the programmer/composer on the project and also contributed a bit to some other aspects of development. The game released on March 19th, 2024, after about two years of development, to positive reception on Steam and has sold over 6,500 units as of July 2024. Post-release, I worked to push out updates with bug fixes, balance changes, and new content, including tons of quality-of-life features and accessibility settings. I'm still working on a few final touches!","I've worked a few jobs as a teaching assistant for college courses in game design and development taught in C# – one using MonoGame and one using Unity. I also worked as a lab technician at RIT's Interactive Games and Media computer labs, helping other students with code and other technical issues."]},{"heading":"Accomplishments & Accolades","paragraphs":["- PAX Rising Showcaser, for [Raw Metal : #games.raw-metal]","- Gold Medal, Scholastic Art & Writing awards, for [Delta A.R.C. : #games.delta-arc]"]}],"gallery":[{"name":"Raw Metal","shortDesc":"Stealth-Action Dungeon Crawler","includeInSlideshow":false,"slideshowImg":"","previewImg":"preview-rm.png","videoURL":"https://www.youtube.com/embed/WY8ua4s1_uE?si=na3qvzFxkESzX0-3","linkURL":"https://store.steampowered.com/app/2279600/Raw_Metal/","linkTitle":"Steam Page w/Demo","text":[{"heading":"Overview","paragraphs":["[img : scav.png, right] [i : Raw Metal] is a singleplayer high-stakes dungeon crawler that combines top-down stealth with 3rd-person beat-em-up combat. The game features a series of levels that players must navigate, escaping or fighting off guards to avoid getting knocked out. Players use a combination of upgradable gear, gadgets, and skill to make their way through levels and defeat each boss. [i : Raw Metal] was created using the Unity game engine over the course of two years by Team Crucible, a small independent game company. "]},{"heading":"My Contributions","paragraphs":["My main role was as the sole programmer of the game. Notable systems I created include:","- Complex character state machines that govern the behavior of the player, guards, and bosses. I used a modular setup by extending Unity's ScriptableObject class, allowing the creation of unique state types.","- ScriptableObjects are also used to define \"effects,\" which include things like hitbox activations, attack damage & knockback, buffs, and temporary invulnerability, and can be applied in a variety of situations, including when a certain state is activated/deactivated, allowing for a high degree of customizable behavior by adding effects to states.","- Upgradable gear with modular effects. Pieces of gear (armor that provides unique effects) are defined as prefab objects that can have their stats and effects easily set in the inspector. Multiple effects can be added, each with their own front-facing description and conditions (ex. when in shadow, when at low HP, etc.). A curve is used to define how the effect will increase as the gear is upgraded.","- Heat system that allows enemies to \"predict\" your attacks. Enemies build a value called \"heat\" when you use the same attack or pattern of attacks repeatedly. When this value gets high enough, the enemy will have a chance to block or parry you. This uses a fixed-length array of values corresponding to the most recent attacks the enemy saw you throw (there are 4 types of trackable attacks). Whenever you attack, the enemy will check for patterns in that array and build heat accordingly to simulate the enemy \"learning\" your tendencies. It took a lot of fine-tuning to get this just right – I think I made maybe 3 different implementations of this before settling on the final version.","I also created the [music : #music.raw-metal], did the majority of the UI design work, assisted with some materials and VFX (using Unity's Shader Graph), and did some minor sound design work where necessary. I provided the environmental [concept art : #art.raw-metal] and designed visuals for some gear. For the gear I didn't design, I still helped by translating rough sketches into reference art that could be used by our 3D artist."]},{"heading":"Lessons Learned","paragraphs":["I learned a ton about 3D game development in this project, and got a lot of hands-on time with physics, UI, and AI that I hadn't really had before. Diving into the character state machines wasn't new to me, but the modular approach where behavior is defined externally to the character script, was something I hadn't tried before. It was challenging at first, but the final system works very well.","Trying to work around a prebuilt (read: obfuscated) physics engine was annoying. There are still places where characters can clip into walls or floors, but even big budget games have those issues, and I'd prefer working with a prebuilt system to rolling my own 3D physics. At certain points, I had to learn when to say \"good enough,\" which I think is a pretty valuable skill to have. There were similar issues with the AI navigation system, for which we used Unity's NavMesh.","Honestly, handling most of the UI design was an interesting new experience. Coming up with screen transitions and trying to figure out the most user-friendly way to structure menus was pretty fun. The visual aspect of menus isn't something I've considered much before, but I learned how important it is to really highlight the important parts of your menus and let the less important parts hang in the background. And of course, don't put so much stuff on the screen that people get overwhelmed!","This being a commercial title, I got some experience with managing a community and participating in PR. [i : Raw Metal] was shown at PAX East, and MAGFest as well as a few local festivals – getting to watch people play the game and get feedback in person was great, and participating in our [Discord server : https://discord.gg/MZavrXhsNZ] has been a good experience, too. Doing all that, I've had to get accustomed to how to speak to potential customers – that is, gas up the game, but be honest and don't overpromise."]}],"infoBox":{"image":"","data":{"Platform":"PC/Mac (Steam & Itch.io)","Engine":"Unity","Released":"March 19, 2024","Genre":"Stealth/Action","Team Size":"5","My Role":"Programmer, Composer, Concept Artist, UI Designer, VFX Artist, Sound Designer","Dev Time":"2 Years"}}},{"name":"Collateral","shortDesc":"Breakneck Bomb Defusal","includeInSlideshow":false,"slideshowImg":"","previewImg":"preview-collateral.jpg","videoURL":"https://www.youtube.com/embed/_GOAiEusjo8?si=J3UPVlHAJGT3ZfQE","linkURL":"https://team-crucible.itch.io/collateral","linkTitle":"Itch.io Page","text":[{"heading":"Overview","paragraphs":["[i : Collateral] is a singleplayer 3D platformer in which you use speedy movement to avoid enemy attacks and command a giant mech to keep yourself safe. The player must explore a large city to find and defuse 9 bombs while avoiding two types of enemy mechs. The player's mech ally, Big Badger, can be commanded to attack and defend against enemies using a few different attacks. [i : Collateral] was created using the Godot game engine over the course of four days by Team Crucible for the 2024 GMTK Game Jam. "]},{"heading":"My Contributions","paragraphs":["I programmed the game using GDScript. I utilized a state machine similar to the one I created for [Raw Metal : #games.raw-metal] for the characters, but I was able to create a more versatile system here that prevented me from needing to write as many unique state scripts. The game's movement was fun to code, and I contributed somewhat to its design.","The 3rd-person camera is fairly typical, though Godot's SpringArm3D node, which I used for it, caused some clipping issues that I was unable to fix in time for the game jam's deadline. I ported some C# code from Raw Metal for the camera shake.","We used a navigation mesh to allow Big Badger and the enemy mechs to move around the game world, follow patrol paths, and chase after their targets. Because the enemy types are pretty different in size, we had to generate two nav meshes. There were some optimization issues with the navigation, as the environment was quite complex, and we didn't have time to create a simplified mesh for navigation. I was able to reduce the number of calls to the navigation server by a lot, but frames still get dropped when moving between areas, as enemies become active when you get within a certain range of them.","The UI was set up using Godot's control nodes, without many modifications, but it was good to get more of a feel for the system. I used signals (events) to connect things like Badger's health to the HUD without needing to write much additional code."]},{"heading":"Lessons Learned","paragraphs":["I learned a good bit about Godot that I didn't know before, such as how its navigation, sound, and animation systems work. This was also my first time working in this engine in a team, so we had to deal with using version control across multiple machines, and I got some experience resolving merge conflicts and corrupted files as a result. It's always good to have a general feel for how data is stored in-engine so you can fix those sorts of things or identify problems more easily in a text editor.","There were also some project management/file organization lessons learned. Since it was a jam, things were put together pretty hastily, but in the future I will push to nail down a solid, thought-out plan for those aspects of development, as they are super important for longer-term projects!"]}],"infoBox":{"image":"","data":{"Platform":"PC (Itch.io)","Engine":"Godot","Released":"August 21, 2024","Genre":"Action/3D Platformer","Team Size":"5","My Role":"Programmer, UI","Dev Time":"4 days"}}},{"name":"Design Doc Excerpts","shortDesc":"Samples from My Design Ideas","includeInSlideshow":false,"slideshowImg":"","previewImg":"aurum-gdd.png","videoURL":"https://www.youtube.com/embed/vsY-ZDjXkis?si=eocEk5hBsQBV84l2","linkURL":"","linkTitle":"","text":[{"heading":"","paragraphs":["It goes without saying that clear communication is important in game development. I've worked on some projects where the design document was not written clearly, and I had to ask the designer for clarification. In a couple cases I've even ended up implementing features incorrectly due to miscommunications. I pride myself in my writing and try to always be clear when communicating my ideas on paper, whether I am planning to show them to others or to my future self. Here are some excerpts from my personal design documents that exemplify this."]},{"heading":"JKL","paragraphs":["[img : jkl-gdd.png, fill]","In this section from my design doc for a fighting game called [i : JKL], I explain the player's dash ability. I make sure to explain the design intention behind the dash by noting the lack of invulnerability, mixup potential, and intended strengths and weaknesses of backdashing to avoid attacks."]},{"heading":"Aurum","paragraphs":["[img : aurum-gdd.png, fill]","In the gameplay section of the design document for an alchemy-themed board game called [i : Aurum], I explain a player's potential actions on their turn. I purposefully provide examples of certain situations which might cause confusion, such as landing on the \"Forfeit Random\" space with fewer than 6 cards in hand, and carefully explain what happens in each case."]},{"heading":"Unnamed Fighting Game","paragraphs":["[img : fg-gdd.png, fill]","In this section of the design document for an unnamed fighting game, I describe the intricacies of the jump input. In many fighting games, a combined up (jump) and down (crouch) input results in a neutral input, as the games are designed to be played with a controller where only one direction can be input at once. However, for this game, I planned to allow jump to be bound to its own button. In the case that the player presses the jump button while crouching, it seems like they should jump, rather than just standing up into a neutral position. So, I felt the need to explain what exactly would happen in such a situation. It's edge cases like these that I feel it is important to consider when designing the intricacies of a game's systems."]},{"heading":"Super Hide & Seek","paragraphs":["[img : hns-gdd.png, fill]","In this design document for a multiplayer hide-and-seek platformer, I list the different types of hints that seekers/chasers may receive about the whereabouts of the hiders/runners. I often use tables for this sort of information, where a list needs each item to share properties (in this case, name, description, and additional criteria)."]},{"heading":"Delta A.R.C. (Remake)","paragraphs":["[img : delta-arc-gdd.png, fill]","On the first page of my design document for a new version/remake of my old game [Delta A.R.C. : #games.delta-arc], I give a brief overview of the game's general concept and mechanics. I pretty much always include a section like this in my design docs. For now, this is a document for myself, but if I was bringing this to a team I would add some additional upfront information about the game's aesthetic, story, and setting, probably using a mood board to supplement text."]},{"heading":"Shifting Talismans","paragraphs":["[img : talismans-gdd.png, fill]","Although the writing itself isn't as good on this one and wasn't updated to match some of the changes we made to the project later in development, I've included this example to show the usage of visual aid. Although the tile-sliding mechanics of [Shifting Talismans : #games.shifting-talismans] are simple in practice, they are a little bit difficult to clearly explain with words alone, so I made a diagram using screenshots of a prototype version of the game."]}],"infoBox":{"image":"","data":{"Platform":"This is not a game","Engine":"...Google Docs","Released":"No","Genre":"Design Document","Team Size":"1","My Role":"Designer, Writer","Dev Time":"Varies"}}},{"name":"The Marked","shortDesc":"A Visual Novel About Power","includeInSlideshow":false,"slideshowImg":"","previewImg":"preview-marked.png","videoURL":"https://www.youtube.com/embed/SjPl10_viFc?si=eLfKHLRJnnQWtRTb","linkURL":"https://people.rit.edu/zbw5667/529/themarked/","linkTitle":"Play In Browser","text":[{"heading":"","paragraphs":["[img : quelle.png, left] "]},{"heading":"Overview","paragraphs":["[i : The Marked] is a short visual novel with a branching story. You play as Sinclair, a college student who struggles to find their place in the world. Sinclair has the Mark, an indicator of great psychic power, but has lost their abilities after a traumatic incident. Suddenly, a mysterious being appears and offers to restore Sinclair's powers. They accept and must then reckon with the expectations that come with that power - the player is given many dialogue choices and chances to use the power of the Mark in various ways, all of which lead to different scenes, culminating in five endings. [i : The Marked] was a solo project created for an Interactive Narrative course at RIT."]},{"heading":"My Contributions","paragraphs":["I used [Twine : https://twinery.org/], an open-source tool for creating interactive stories, to create [i : The Marked]. Twine isn't really designed for making this type of visual novel, so I had to extend it to fit my own needs. I wrote HTML and CSS to build the game's UI and sprites, and used JavaScript to code things like text appearing over time, seamless music looping, user input, and custom variables.","Much of the work involved creating custom commands for the game. Twine uses a graph of connected \"passages\" of text to organize stories. In order to get custom functionality out of these passages, I created commands that would be typed into the passages and parsed by JavaScript code in order to execute actions like swapping the background or character sprites, changing music, setting and reading variables to determine which branch to move to, etc.","I wrote the story, employing techniques such as a 3-act structure, Freytag's Pyramid, and reversals. As this was created for an Interactive Narrative course, I really focused on trying to make the story and characters interesting.","I also drew all the art for the game and made the [music : #music.the-marked]."]},{"heading":"Lessons Learned","paragraphs":["I think I succeeded in creating an interesting and fun story to interact with, but it was difficult to correctly tackle certain topics with the nuance I wanted. I realized how hard it is to write effective allegory, and how hard it is to write flawed characters without making them unlikable (particularly, I'm not completely satisfied with how the love interest, Kat, turned out).","From a technical standpoint, I learned the ins and outs (and limitations) of Twine. In the future, I don't think I'd like to go so far in extending a tool that is clearly not built for the purpose I want. Using Twine was a requirement for the project, so in that context it was fun to challenge myself, and I am satisfied with how I was able to build a more robust visual novel engine within Twine, but it certainly would have been more practical to use a more appropriate tool such as Ren'Py or even a multi-purpose game engine like Unity or Godot. On the plus side, the experience gained was valuable, especially on the CSS and JS fronts."]}],"infoBox":{"image":"","data":{"Platform":"Web","Engine":"Twine","Released":"December 2023","Genre":"Visual Novel","Team Size":"Solo","My Role":"Writer, Designer, Programmer, Artist, Composer","Dev Time":"2 Months"}}},{"name":"Stationary","shortDesc":"Narrative Pixel Horror","includeInSlideshow":false,"slideshowImg":"","previewImg":"preview-stationary.png","videoURL":"https://www.youtube.com/embed/naxgiKu6Z8Q?si=W3IMqoD3hR-U_FRX","linkURL":"https://juicecube.itch.io/stationary","linkTitle":"Itch.io Page","text":[{"heading":"Overview","paragraphs":["[i : Stationary] is a 2D narrative horror game in which you take on the role of a rookie police officer who finds himself alone in the station at night. He prepares to go home but finds that every time he tries to exit the station, he finds himself back where he started. The game takes place within this closed loop. Each time the level loops, things get more frightening, and interaction dialogue changes. The gameplay involves interacting with various objects to find clues to escape the loop. The game contains two endings (one good and one bad), based on if you are able to complete the objective in time. This game is loosely based on Jim Butcher's [i : The Dresden Files] series. Stationary was made in a team of 5 for a game design course at RIT."]},{"heading":"My Contributions","paragraphs":["I programmed the dialogue system and menus, as well as the system that changes the appearance of the level and dialogue options each time the level loops. The dialogue system was set up to give us a high degree of versatility, allowing us to display character portraits and format text. However, as this game isn't heavy on mechanics that were difficult to program, I was able to spend most of my time polishing the atmosphere of the game to make it more frightening. I created dust particles, and used Photoshop to create the high-resolution assets for the game, such as the black mold overlays that appear over the background art. We used high-resolution images for the mold to make it feel unsettling and out of place when contrasted with the pixel art."]},{"heading":"Lessons Learned","paragraphs":["Since this project wasn't difficult from a technical standpoint, I think the biggest takeaway I have is that I actually prefer working on more challenging projects with more interesting mechanics. I put plenty of effort into the art and code for this game, and I'm pleased with the result, but I definitely like a project with more mechanical depth to explore.","One issue with this game is that there are quite a few interactable objects that do not change their interaction dialogue after you learn information that would make that interaction obsolete, so sometimes the dialogue is redundant or doesn't make much sense. We definitely should have spent more time ensuring that all possible routes and orders of interacting with objects would make sense, rather than just the \"intended\" good/bad paths. In general, something I've learned from this and other future projects is that it's extremely important to test tons of different ways of playing a game, not just the way you yourself would play. Of course, that's part of why it's so important to have playtesters, but being proactive and testing unusual paths as a developer can go a long way, too."]}],"infoBox":{"image":"","data":{"Platform":"PC/Mac (Itch.io)","Engine":"Unity","Released":"December 2021","Genre":"Walking Sim/Horror","Team Size":"5","My Role":"Co-Designer, FX Artist, UI Designer, Programmer","Dev Time":"5 Weeks"}}},{"name":"Shifting Talismans","shortDesc":"Magical Puzzle Action","includeInSlideshow":false,"slideshowImg":"","previewImg":"preview-talismans.png","videoURL":"https://www.youtube.com/embed/cP3imsRE4dU?si=FtToS5c7fOIqszQU","linkURL":"https://juicecube.itch.io/shifting-talismans","linkTitle":"Itch.io Page","text":[{"heading":"Overview","paragraphs":["[i : Shifting Talismans] is a tile-sliding puzzle game. The player takes on the role of a sorcerer who must face off against an encroaching horde of demons. The gameplay consists of sliding rows and columns of tiles around a grid. The player must match these tiles to locations with matching colors and shapes in order to fix a broken talisman and banish a demon, thus completing each level. The game includes a story mode with six levels, each with a unique demon with its own short dialogue and uniquely-shaped board. Story mode levels must be beaten within a certain time limit. There is also an endless mode, which has no time limit but is played for fun or to practice. Once story mode is beaten, more difficult stages of endless mode are unlocked. [i : Shifting Talismans] was developed in a team of 5 for a game design course at RIT."]},{"heading":"My Contributions","paragraphs":["I wrote most of the code for this project, such as the algorithms for board generation, tile sliding, and save data, as well as much of the implementation of menus and other auxiliary functions. Of note is the system used to create the puzzles. I extended Unity's ScriptableObject class to create a class that would allow the team to create many uniquely shaped grids for levels to be played on. A game manager script stores which of these grid presets are used for which levels/difficulties and generates puzzles accordingly. Levels are generated by randomly placing tiles in the background layer, then filling the foreground layer with matching tiles in a shuffled configuration. Puzzles are generated with as close to even numbers of each type of tile in order to standardize difficult between generations.","The algorithm for sliding tiles around the board required tiles to wrap around the edges of the board, and to have both a preview and actual position in case the player canceled their move. Separately, these requirements were not difficult, but when combined they provided some challenge, as tiles had to be able to be smoothly dragged while wrapping."]},{"heading":"Lessons Learned","paragraphs":["Overall, this project was not difficult. The game's main mechanics were implemented over the course of a few days. However, polishing everything to control and animate more nicely took up a signficant portion of the development time. Although it was not an issue for this project, it did help me learn that polish is something that takes a good amount of time that must be planned for. Also, due to some minor issues with the team, I had to pull some additional weight on this project – although it is unfortunate, I think it was nonetheless valuable experience, as that kind of thing can happen."]}],"infoBox":{"image":"","data":{"Platform":"PC/Mac (Itch.io)","Engine":"Unity","Released":"2021","Genre":"Puzzle","Team Size":"5","My Role":"Lead Programmer, Co-Designer, Asset Implementation, VFX Artist","Dev Time":"5 Weeks"}}},{"name":"Worm Go Down","shortDesc":"Undersea Twin-Stick Shooter","includeInSlideshow":false,"slideshowImg":"","previewImg":"preview-worm.png","videoURL":"https://www.youtube.com/embed/WerPaFoeXGY?si=fp69QNxN-w-_C5-S","linkURL":"https://juicecube.itch.io/worm-go-down","linkTitle":"Itch.io Page","text":[{"heading":"Overview","paragraphs":["[i : Worm Go Down] is a twin-stick shooter in which the player controls a worm of mysterious origin who must venture deep into the ocean and fight strange aquatic enemies. The player must manage their position carefully to avoid getting hit, as both the head and tail can take damage. Health is represented by the number of segments on the player's tail, and the same applies to enemies – this creates a sort of comeback mechanic where the less health you have, the smaller (and therefore harder to hit) you are. The player can choose between shooting fast, focused fire or slower spread shots. These systems are simple, but managing them provides for fairly interesting gameplay. [i : Worm Go Down] was a solo project made for the Ludum Dare 48 game jam."]},{"heading":"My Contributions","paragraphs":["I made everything myself. I used Unity's line renderer for the tails of the creatures in the game. To get the tails to look good, I implemented an inverse kinematics algorithm that allows one of the ends of the tail to be locked in place while the other end follows behind. The enemies use standard steering behaviors to move around.","Another thing I made for this game was a dynamic ocean surface that uses Perlin noise to create animated ripples by changing the vertices of a Unity sprite shape. Sprite shapes were also used to create the terrain."]},{"heading":"Lessons Learned","paragraphs":["Working on the IK system was certainly interesting. I wanted to make a robust system that would allow for varied creatures with different arrangements of tentacles and tails, but I had to cut back on my plans since my time limit was short. One problem with [i : Worm Go Down] is that the IK tentacles don't work well when they collide with walls or other tentacles. I tried to keep this to a minimum, but it still is an issue. The lesson I have learned from that is that built-in engine physics systems are often difficult to debug and can result in very difficult-to-solve problems when used in unusual ways. If I were to make a similar project in the future, I would probably make a custom physics system, at least for the collision of the IK tentacles."]}],"infoBox":{"image":"","data":{"Platform":"Web (Itch.io)","Engine":"Unity","Released":"2021","Genre":"Twin-Stick Shooter","Team Size":"1","My Role":"Designer, Programmer, Artist, Composer/Sound Designer","Dev Time":"72 Hours"}}},{"name":"TileTracer","shortDesc":"Grid-Based Arcade Battle","includeInSlideshow":false,"slideshowImg":"","previewImg":"preview-tiletracer.png","videoURL":"https://www.youtube.com/embed/8Qe9_jLZQy8?si=FqMfRZDDwUlgZV1G","linkURL":"https://people.rit.edu/zbw5667/235/project3/index.html","linkTitle":"Play Here","text":[{"heading":"Overview","paragraphs":["[i : TileTracer] is a grid-based versus game inspired by the classic snake game. Player 1 draws a path from one end of a grid to the other, then Player 2 must follow that path exactly, and vice versa. The player drawing the path can't run off the grid or run into their own path. 2-player mode has 3 lifeline powerups that spawn at random positions, adding an incentive to make varied path shapes. 1-player mode ditches the powerups in favor of a more hardcore survival mode against an enemy AI. In both modes, the game's speed increases over time to add a difficulty curve.","This was a solo project I made for a web game development course at RIT."]},{"heading":"My Contributions","paragraphs":["I used JavaScript and the PixiJS graphics library to make this game and used Howler.js to play sound effects. I implemented an input buffer to allow players to input moves early (this works similarly to how, in [i : Pac-Man], you can input a turn before you reach an intersection). This system took some tweaking before the controls felt good. I also had to create an AI for the 1-player mode. I made the AI's difficulty increase over time by making it grow more likely to make quick turns. The time before the AI's next turn is determined by a random normal-distributed number generator function whose mean decreases as difficulty rises. One issue I faced was making sure the AI didn't box itself in and run into its own path. I had to make the AI check all the tiles that would be reachable after moving into a potential position in order to make sure the goal would sitll be reachable."]},{"heading":"Lessons Learned","paragraphs":["Working in PixiJS helped me get more comfortable with JavaScript and working without a game engine. I learned a bit about pathfinding when developing the enemy AI – although I was already familiar with most of the concepts I used, putting them into practice was still good experience, especially seeing as how I ran into a few issues in the process."]}],"infoBox":{"image":"","data":{"Platform":"Web","Framework":"PixiJS","Released":"2020","Genre":"Arcade Versus","Team Size":"1","My Role":"Designer, Programmer, Artist, Sound Designer","Dev Time":"1 Week"}}},{"name":"Chrono Killer","shortDesc":"Time-Looping Overhead Action","includeInSlideshow":false,"slideshowImg":"","previewImg":"preview-chrono-killer.png","videoURL":"https://www.youtube.com/embed/PTga4ca5QRk?si=Q1G5Hc62Guu-BSAY","linkURL":"https://juicecube.itch.io/chrono-killer","linkTitle":"Itch.io Page","text":[{"heading":"Overview","paragraphs":["[i : Chrono Killer] is a top-down twin-stick shooter/beat-em-up in which the player must escape a facility using their ability to trap enemies in time loops. There are a multitude of ways to use this power to defeat enemies, such as by making them shoot each other, making them explode and then looping them to repeat the explosion, etc. [i : Chrono Killer] was created in 72 hours for the Ludum Dare 47 game jam."]},{"heading":"My Contributions","paragraphs":["I programmed the game and made the music and UI. The enemy guards use Unity's NavMesh system to pathfind between nodes on a patrol route and to chase the player. A finite state machine is used to govern enemy behavior. Character actions are recorded in a queue that gets replayed when the time loop ability is used – they also get replayed in reverse when the player dies to create a cool rewind effect. This system was difficult to get working properly, but I'm fairly pleased with the result."]},{"heading":"Lessons Learned","paragraphs":["Although I feel we managed to implement the mechanics well, the time loop power doesn't feel necessary and is too difficult to use effectively compared to the other attacks the player has access to. We spent so much time implementing a cool game mechanic that we didn't have time to reflect on whether the game was actually well-designed. We also didn't have time to make more than just one very short level, so that was disappointing. My main takeaway was to not assume that a design idea that works well on paper will work well in practice, and to leave more room for testing and adjustments. Of course, I also got some valuable experience with enemy AI, data structures, and optimization in this project."]}],"infoBox":{"image":"","data":{"Platform":"Web/PC/Mac","Engine":"Unity","Released":"October 2020","Genre":"Twin-Stick Shooter","Team Size":"2","My Role":"Lead Programmer, Level Construction, UI, Composer","Dev Time":"72 Hours"}}},{"name":"Grapple Gaiden","shortDesc":"Grappling Hook Action Platformer","includeInSlideshow":false,"slideshowImg":"","previewImg":"preview-grapple.png","videoURL":"https://www.youtube.com/embed/mf8apHzs-Gc?si=nLCkfO8rA6hgUHIY","linkURL":"","linkTitle":"","text":[{"heading":"Overview","paragraphs":["[i : Grapple Gaiden] is a 2D action platformer with a focus on high-speed movement. The player can grapple to preset points in levels, as well as to enemies. The grapple can be canceled early by jumping or attacking, which opens up many possibilities for speedy traversal. The game also includes a level editor, which was created as a tool for us developers to create levels but is included in the game as a fun bonus feature. [i : Grapple Gaiden] was created in MonoGame over the course of 5 months by a small team of students as part of a game development course at RIT."]},{"heading":"My Contributions","paragraphs":["Aside from coming up with the initial mechanical ideas for the game, I acted as the art director for the game, sourcing a royalty-free tileset for the levels and hand-drawing the animation for the player and enemies, as well as creating the music and sound effects. Probably my largest contribution was actually to the codebase, though, as I handled most of the lower-level systems, including a custom coordinate system to allow zooming and scrolling, level storage and drawing, physics, and the camera. I also helped out with the UI code, fine-tuning player movement, and making additional game objects such as breakable glass."]},{"heading":"Lessons Learned","paragraphs":["I had created a few projects in Unity prior to this game, so this was my first project without an engine. There was a lot of math involved, but I feel that getting hands-on experience with how things like physics and instanced drawing work made me much more confident in my ability to understand and work with those systems in an engine environment as well. This was also my first project in a team of this size and gave me some great experience with how to organize and plan tasks amongst a team. We used Trello to designate tasks and Git for version control.","This game was also another stepping stone on my journey of learning to not overscope, as there were many plans for this game that didn't come to fruition, such as a story, boss fights, cutscenes, etc. We didn't necessarily plan on getting all that done in 5 months, but we were definitely more concerned with cool ideas than what we actually would be able to accomplish. The final product is not bad, and I still believe it to be a good showcase of some of my lower-level programming abilities, but it's hardly a complete game."]}],"infoBox":{"image":"","data":{"Platform":"PC/Mac","Framework":"MonoGame","Released":"2020","Genre":"Action Platformer","Team Size":"5","My Role":"Co-Designer, Art Director, Programmer, Composer/Sound Designer","Dev Time":"5 Months"}}},{"name":"Delta ARC","shortDesc":"Cyberpunk Bullet Hell","includeInSlideshow":false,"slideshowImg":"","previewImg":"preview-delta-arc.png","videoURL":"https://www.youtube.com/embed/grp62uYjB5s?si=68KkHxdoCm610Cnl","linkURL":"https://juicecube.itch.io/delta-arc","linkTitle":"Itch.io Page","text":[{"heading":"Overview","paragraphs":["[i : Delta A.R.C.] is a story-driven cyberpunk bullet hell with precise movement. The player takes control of Amaya Sasaki, who lost her home in a mysterious incident and uncovers a conspiracy revolving around the largest corporation in Neon City. The gameplay centers on avoiding enemies' bullet patterns and moving carefully in order to get near-misses and charge up a powerful beam attack. This was a solo passion project I made in high school. I submitted the game to the Scholastic Art & Writing Awards in 2019, and won a Gold Medal at the national level."]},{"heading":"My Contributions","paragraphs":["I coded everything, made the music, art, and sound effects, and wrote the story.","The game was made in Unity, coded in C#. I created a few custom editors for various things, notably the dialogue and bullet patterns. For dialogue, I allowed different characters' facial expressions to be specified for different lines of dialogue. For bullet patterns, I made a system similar to Unity's particle system that allowed me to specify how bullets would move, whether they would home in on the player, whether they were destructable, used sub-emitters etc. I utilized an object pooler structure to prevent frame drops from instantiating bullets repeatedly. I used Photoshop for the character portraits and backgrounds and Adobe Animate for in-game character animation."]},{"heading":"Lessons Learned","paragraphs":["I got some good experience in this project with data structures, as I needed to optimize the bullets since there are so many. Additionally, setting up a system for sequencing the entrance and exits of enemies, dialogues, and other events during each level was a challenge for me at the time. I'm pretty proud of the end result, but it could be a lot better. I was laser-focused on certain aspects of the game and ended up neglecting others. The dialogue is slow and boring, the gameplay is slow, and the art isn't really up to my current standards. I'd like to revisit this project someday and use what I've learned since then to make something better.","[i : Delta A.R.C.] also taught me a lot about managing a larger game's scope. I had a ton of levels planned out – way more than I'd be able to make on my own. Additionally, I was working on this game while in high school, so I didn't spend much time on it and was ultimately unable to complete it, ending up with only a demo version. If I were to take on a project like this today, I would definitely not go about it alone, and would probably designate other team members to handle the art, animation, and perhaps some of the code and level design."]}],"infoBox":{"image":"","data":{"Platform":"PC/Mac (Itch.io)","Engine":"Unity","Released":"2018-2019","Genre":"Bullet Hell","Team Size":"1","My Role":"Designer, Programmer, Composer, Artist, Sound Designer","Dev Time":"1 Year","Awards":"Scholastic Art & Writing Gold Medal"}}}]}